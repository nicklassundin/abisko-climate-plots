const custom_config = await import("./config/server.json", {
    assert: {
        type: "json"
    }
});
const default_config = await import("./config/default.server.json", {
    assert: {
        type: "json"
    }
});

function loadConfig() {
    if (custom_config) {
        return custom_config.default;
    }
    return default_config.default;
}

import http from "http";
import https from "https";
/**
 * Webserver creation
 * @type {{http(*): ({ClientRequestArgs: ClientRequestArgs, ServerResponse: ServerResponse, Agent: Agent, STATUS_CODES: {[p: number]: string | undefined, [p: string]: string | undefined}, Server: Server, RequestOptions: RequestOptions, globalAgent: Agent, OutgoingHttpHeaders: OutgoingHttpHeaders, METHODS: string[], OutgoingMessage: OutgoingMessage, validateHeaderName(name: string): void, RequestListener: (req: InstanceType<Request>, res: (InstanceType<Response> & {req: InstanceType<Request>})) => void, setMaxIdleHTTPParsers(max: number): void, InformationEvent: InformationEvent, OutgoingHttpHeader: number | string | string[], createServer: {<Request=typeof IncomingMessage extends typeof IncomingMessage, Response=typeof ServerResponse extends typeof ServerResponse>(requestListener?: RequestListener<Request, Response>): Server<Request, Response>, <Request=typeof IncomingMessage extends typeof IncomingMessage, Response=typeof ServerResponse extends typeof ServerResponse>(options: ServerOptions<Request, Response>, requestListener?: RequestListener<Request, Response>): Server<Request, Response>}, maxHeaderSize: number, ClientRequest: ClientRequest, IncomingMessage: IncomingMessage, AgentOptions: AgentOptions, validateHeaderValue(name: string, value: string): void, IncomingHttpHeaders: IncomingHttpHeaders, ServerOptions: ServerOptions, get: {(options: (RequestOptions | string | URL), callback?: (res: IncomingMessage) => void): ClientRequest, (url: (string | URL), options: RequestOptions, callback?: (res: IncomingMessage) => void): ClientRequest}, request: {(options: (RequestOptions | string | URL), callback?: (res: IncomingMessage) => void): ClientRequest, (url: (string | URL), options: RequestOptions, callback?: (res: IncomingMessage) => void): ClientRequest}} | {ClientRequestArgs: ClientRequestArgs, ServerResponse: ServerResponse, Agent: Agent, STATUS_CODES: {[p: number]: string | undefined, [p: string]: string | undefined}, Server: Server, RequestOptions: RequestOptions, globalAgent: Agent, OutgoingHttpHeaders: OutgoingHttpHeaders, METHODS: string[], OutgoingMessage: OutgoingMessage, validateHeaderName(name: string): void, RequestListener: (req: InstanceType<Request>, res: (InstanceType<Response> & {req: InstanceType<Request>})) => void, setMaxIdleHTTPParsers(count: number): void, InformationEvent: InformationEvent, OutgoingHttpHeader: number | string | string[], createServer: {<Request=typeof IncomingMessage extends typeof IncomingMessage, Response=typeof ServerResponse extends typeof ServerResponse>(requestListener?: RequestListener<Request, Response>): Server<Request, Response>, <Request=typeof IncomingMessage extends typeof IncomingMessage, Response=typeof ServerResponse extends typeof ServerResponse>(options: ServerOptions<Request, Response>, requestListener?: RequestListener<Request, Response>): Server<Request, Response>}, maxHeaderSize: number, ClientRequest: ClientRequest, IncomingMessage: IncomingMessage, AgentOptions: AgentOptions, validateHeaderValue(name: string, value: string): void, IncomingHttpHeaders: IncomingHttpHeaders, ServerOptions: ServerOptions, get: {(options: (RequestOptions | string | URL), callback?: (res: IncomingMessage) => void): ClientRequest, (url: (string | URL), options: RequestOptions, callback?: (res: IncomingMessage) => void): ClientRequest}, request: {(options: (RequestOptions | string | URL), callback?: (res: IncomingMessage) => void): ClientRequest, (url: (string | URL), options: RequestOptions, callback?: (res: IncomingMessage) => void): ClientRequest}} | {ClientRequestArgs: ClientRequestArgs, ServerResponse: ServerResponse, Agent: Agent, STATUS_CODES: {[p: number]: string | undefined, [p: string]: string | undefined}, Server: Server, RequestOptions: RequestOptions, globalAgent: Agent, OutgoingHttpHeaders: OutgoingHttpHeaders, METHODS: string[], OutgoingMessage: OutgoingMessage, validateHeaderName(name: string): void, RequestListener: (req: InstanceType<Request>, res: (InstanceType<Response> & {req: InstanceType<Request>})) => void, setMaxIdleHTTPParsers(count: number): void, InformationEvent: InformationEvent, OutgoingHttpHeader: number | string | string[], createServer: {<Request=typeof IncomingMessage extends typeof IncomingMessage, Response=typeof ServerResponse extends typeof ServerResponse>(requestListener?: RequestListener<Request, Response>): Server<Request, Response>, <Request=typeof IncomingMessage extends typeof IncomingMessage, Response=typeof ServerResponse extends typeof ServerResponse>(options: ServerOptions<Request, Response>, requestListener?: RequestListener<Request, Response>): Server<Request, Response>}, maxHeaderSize: number, ClientRequest: ClientRequest, IncomingMessage: IncomingMessage, AgentOptions: AgentOptions, validateHeaderValue(name: string, value: string): void, IncomingHttpHeaders: IncomingHttpHeaders, ServerOptions: ServerOptions, get: {(options: (RequestOptions | string | URL), callback?: (res: IncomingMessage) => void): ClientRequest, (url: (string | URL), options: RequestOptions, callback?: (res: IncomingMessage) => void): ClientRequest}, request: {(options: (RequestOptions | string | URL), callback?: (res: IncomingMessage) => void): ClientRequest, (url: (string | URL), options: RequestOptions, callback?: (res: IncomingMessage) => void): ClientRequest}} | {ClientRequestArgs: ClientRequestArgs, ServerResponse: ServerResponse, Agent: Agent, STATUS_CODES: {[p: number]: string | undefined, [p: string]: string | undefined}, Server: Server, RequestOptions: RequestOptions, globalAgent: Agent, OutgoingHttpHeaders: OutgoingHttpHeaders, METHODS: string[], OutgoingMessage: OutgoingMessage, validateHeaderName(name: string): void, RequestListener: (req: InstanceType<Request>, res: (InstanceType<Response> & {req: InstanceType<Request>})) => void, setMaxIdleHTTPParsers(count: number): void, InformationEvent: InformationEvent, OutgoingHttpHeader: number | string | string[], createServer: {<Request=typeof IncomingMessage extends typeof IncomingMessage, Response=typeof ServerResponse extends typeof ServerResponse>(requestListener?: RequestListener<Request, Response>): Server<Request, Response>, <Request=typeof IncomingMessage extends typeof IncomingMessage, Response=typeof ServerResponse extends typeof ServerResponse>(options: ServerOptions<Request, Response>, requestListener?: RequestListener<Request, Response>): Server<Request, Response>}, maxHeaderSize: number, ClientRequest: ClientRequest, IncomingMessage: IncomingMessage, AgentOptions: AgentOptions, validateHeaderValue(name: string, value: string): void, IncomingHttpHeaders: IncomingHttpHeaders, ServerOptions: ServerOptions, get: {(options: (RequestOptions | string | URL), callback?: (res: IncomingMessage) => void): ClientRequest, (url: (string | URL), options: RequestOptions, callback?: (res: IncomingMessage) => void): ClientRequest}, request: {(options: (RequestOptions | string | URL), callback?: (res: IncomingMessage) => void): ClientRequest, (url: (string | URL), options: RequestOptions, callback?: (res: IncomingMessage) => void): ClientRequest}} | {ClientRequestArgs: ClientRequestArgs, ServerResponse: ServerResponse, Agent: Agent, STATUS_CODES: {[p: number]: string | undefined, [p: string]: string | undefined}, Server: Server, RequestOptions: RequestOptions, globalAgent: Agent, OutgoingHttpHeaders: OutgoingHttpHeaders, METHODS: string[], OutgoingMessage: OutgoingMessage, validateHeaderName(name: string): void, RequestListener: (req: InstanceType<Request>, res: (InstanceType<Response> & {req: InstanceType<Request>})) => void, setMaxIdleHTTPParsers(max: number): void, InformationEvent: InformationEvent, OutgoingHttpHeader: number | string | string[], createServer: {<Request=typeof IncomingMessage extends typeof IncomingMessage, Response=typeof ServerResponse extends typeof ServerResponse>(requestListener?: RequestListener<Request, Response>): Server<Request, Response>, <Request=typeof IncomingMessage extends typeof IncomingMessage, Response=typeof ServerResponse extends typeof ServerResponse>(options: ServerOptions<Request, Response>, requestListener?: RequestListener<Request, Response>): Server<Request, Response>}, maxHeaderSize: number, ClientRequest: ClientRequest, IncomingMessage: IncomingMessage, AgentOptions: AgentOptions, validateHeaderValue(name: string, value: string): void, IncomingHttpHeaders: IncomingHttpHeaders, ServerOptions: ServerOptions, get: {(options: (RequestOptions | string | URL), callback?: (res: IncomingMessage) => void): ClientRequest, (url: (string | URL), options: RequestOptions, callback?: (res: IncomingMessage) => void): ClientRequest}, request: {(options: (RequestOptions | string | URL), callback?: (res: IncomingMessage) => void): ClientRequest, (url: (string | URL), options: RequestOptions, callback?: (res: IncomingMessage) => void): ClientRequest}} | {ClientRequestArgs: ClientRequestArgs, ServerResponse: ServerResponse, Agent: Agent, STATUS_CODES: {[p: number]: string | undefined, [p: string]: string | undefined}, Server: Server, RequestOptions: RequestOptions, globalAgent: Agent, OutgoingHttpHeaders: OutgoingHttpHeaders, METHODS: string[], OutgoingMessage: OutgoingMessage, validateHeaderName(name: string): void, RequestListener: (req: InstanceType<Request>, res: (InstanceType<Response> & {req: InstanceType<Request>})) => void, setMaxIdleHTTPParsers(count: number): void, InformationEvent: InformationEvent, OutgoingHttpHeader: number | string | string[], createServer: {<Request=typeof IncomingMessage extends typeof IncomingMessage, Response=typeof ServerResponse extends typeof ServerResponse>(requestListener?: RequestListener<Request, Response>): Server<Request, Response>, <Request=typeof IncomingMessage extends typeof IncomingMessage, Response=typeof ServerResponse extends typeof ServerResponse>(options: ServerOptions<Request, Response>, requestListener?: RequestListener<Request, Response>): Server<Request, Response>}, maxHeaderSize: number, ClientRequest: ClientRequest, IncomingMessage: IncomingMessage, AgentOptions: AgentOptions, validateHeaderValue(name: string, value: string): void, IncomingHttpHeaders: IncomingHttpHeaders, ServerOptions: ServerOptions, get: {(options: (RequestOptions | string | URL), callback?: (res: IncomingMessage) => void): ClientRequest, (url: (string | URL), options: RequestOptions, callback?: (res: IncomingMessage) => void): ClientRequest}, request: {(options: (RequestOptions | string | URL), callback?: (res: IncomingMessage) => void): ClientRequest, (url: (string | URL), options: RequestOptions, callback?: (res: IncomingMessage) => void): ClientRequest}}|undefined), https(*): ({get: {(options: (RequestOptions | string | URL), callback?: (res: http.IncomingMessage) => void): http.ClientRequest, (url: (string | URL), options: RequestOptions, callback?: (res: http.IncomingMessage) => void): http.ClientRequest}, request: {(options: (RequestOptions | string | URL), callback?: (res: http.IncomingMessage) => void): http.ClientRequest, (url: (string | URL), options: RequestOptions, callback?: (res: http.IncomingMessage) => void): http.ClientRequest}, Agent: Agent, Server: Server, createServer: {<Request=typeof http.IncomingMessage extends typeof http.IncomingMessage, Response=typeof http.ServerResponse extends typeof http.ServerResponse>(requestListener?: http.RequestListener<Request, Response>): Server<Request, Response>, <Request=typeof http.IncomingMessage extends typeof http.IncomingMessage, Response=typeof http.ServerResponse extends typeof http.ServerResponse>(options: ServerOptions<Request, Response>, requestListener?: http.RequestListener<Request, Response>): Server<Request, Response>}, RequestOptions: http.RequestOptions & tls.SecureContextOptions & {checkServerIdentity?: typeof tls.checkServerIdentity | undefined, rejectUnauthorized?: boolean | undefined, servername?: string | undefined}, globalAgent: Agent, AgentOptions: AgentOptions, ServerOptions: tls.SecureContextOptions & tls.TlsOptions & http.ServerOptions<Request, Response>} | {get: {(options: (RequestOptions | string | URL), callback?: (res: http.IncomingMessage) => void): http.ClientRequest, (url: (string | URL), options: RequestOptions, callback?: (res: http.IncomingMessage) => void): http.ClientRequest}, request: {(options: (RequestOptions | string | URL), callback?: (res: http.IncomingMessage) => void): http.ClientRequest, (url: (string | URL), options: RequestOptions, callback?: (res: http.IncomingMessage) => void): http.ClientRequest}, Agent: Agent, Server: Server, createServer: {<Request=typeof http.IncomingMessage extends typeof http.IncomingMessage, Response=typeof http.ServerResponse extends typeof http.ServerResponse>(requestListener?: http.RequestListener<Request, Response>): Server<Request, Response>, <Request=typeof http.IncomingMessage extends typeof http.IncomingMessage, Response=typeof http.ServerResponse extends typeof http.ServerResponse>(options: ServerOptions<Request, Response>, requestListener?: http.RequestListener<Request, Response>): Server<Request, Response>}, RequestOptions: http.RequestOptions & tls.SecureContextOptions & {checkServerIdentity?: typeof tls.checkServerIdentity | undefined, rejectUnauthorized?: boolean | undefined, servername?: string | undefined}, globalAgent: Agent, AgentOptions: AgentOptions, ServerOptions: tls.SecureContextOptions & tls.TlsOptions & http.ServerOptions<Request, Response>} | {get: {(options: (RequestOptions | string | URL), callback?: (res: http.IncomingMessage) => void): http.ClientRequest, (url: (string | URL), options: RequestOptions, callback?: (res: http.IncomingMessage) => void): http.ClientRequest}, request: {(options: (RequestOptions | string | URL), callback?: (res: http.IncomingMessage) => void): http.ClientRequest, (url: (string | URL), options: RequestOptions, callback?: (res: http.IncomingMessage) => void): http.ClientRequest}, Agent: Agent, Server: Server, createServer: {<Request=typeof http.IncomingMessage extends typeof http.IncomingMessage, Response=typeof http.ServerResponse extends typeof http.ServerResponse>(requestListener?: http.RequestListener<Request, Response>): Server<Request, Response>, <Request=typeof http.IncomingMessage extends typeof http.IncomingMessage, Response=typeof http.ServerResponse extends typeof http.ServerResponse>(options: ServerOptions<Request, Response>, requestListener?: http.RequestListener<Request, Response>): Server<Request, Response>}, RequestOptions: http.RequestOptions & tls.SecureContextOptions & {checkServerIdentity?: typeof tls.checkServerIdentity | undefined, rejectUnauthorized?: boolean | undefined, servername?: string | undefined}, globalAgent: Agent, AgentOptions: AgentOptions, ServerOptions: tls.SecureContextOptions & tls.TlsOptions & http.ServerOptions<Request, Response>} | {get: {(options: (RequestOptions | string | URL), callback?: (res: http.IncomingMessage) => void): http.ClientRequest, (url: (string | URL), options: RequestOptions, callback?: (res: http.IncomingMessage) => void): http.ClientRequest}, request: {(options: (RequestOptions | string | URL), callback?: (res: http.IncomingMessage) => void): http.ClientRequest, (url: (string | URL), options: RequestOptions, callback?: (res: http.IncomingMessage) => void): http.ClientRequest}, Agent: Agent, Server: Server, createServer: {<Request=typeof http.IncomingMessage extends typeof http.IncomingMessage, Response=typeof http.ServerResponse extends typeof http.ServerResponse>(requestListener?: http.RequestListener<Request, Response>): Server<Request, Response>, <Request=typeof http.IncomingMessage extends typeof http.IncomingMessage, Response=typeof http.ServerResponse extends typeof http.ServerResponse>(options: ServerOptions<Request, Response>, requestListener?: http.RequestListener<Request, Response>): Server<Request, Response>}, RequestOptions: http.RequestOptions & tls.SecureContextOptions & {checkServerIdentity?: typeof tls.checkServerIdentity | undefined, rejectUnauthorized?: boolean | undefined, servername?: string | undefined}, globalAgent: Agent, AgentOptions: AgentOptions, ServerOptions: tls.SecureContextOptions & tls.TlsOptions & http.ServerOptions<Request, Response>} | {get: {(options: (RequestOptions | string | URL), callback?: (res: http.IncomingMessage) => void): http.ClientRequest, (url: (string | URL), options: RequestOptions, callback?: (res: http.IncomingMessage) => void): http.ClientRequest}, request: {(options: (RequestOptions | string | URL), callback?: (res: http.IncomingMessage) => void): http.ClientRequest, (url: (string | URL), options: RequestOptions, callback?: (res: http.IncomingMessage) => void): http.ClientRequest}, Agent: Agent, Server: Server, createServer: {<Request=typeof http.IncomingMessage extends typeof http.IncomingMessage, Response=typeof http.ServerResponse extends typeof http.ServerResponse>(requestListener?: http.RequestListener<Request, Response>): Server<Request, Response>, <Request=typeof http.IncomingMessage extends typeof http.IncomingMessage, Response=typeof http.ServerResponse extends typeof http.ServerResponse>(options: ServerOptions<Request, Response>, requestListener?: http.RequestListener<Request, Response>): Server<Request, Response>}, RequestOptions: http.RequestOptions & tls.SecureContextOptions & {checkServerIdentity?: typeof tls.checkServerIdentity | undefined, rejectUnauthorized?: boolean | undefined, servername?: string | undefined}, globalAgent: Agent, AgentOptions: AgentOptions, ServerOptions: tls.SecureContextOptions & tls.TlsOptions & http.ServerOptions<Request, Response>} | {get: {(options: (RequestOptions | string | URL), callback?: (res: http.IncomingMessage) => void): http.ClientRequest, (url: (string | URL), options: RequestOptions, callback?: (res: http.IncomingMessage) => void): http.ClientRequest}, request: {(options: (RequestOptions | string | URL), callback?: (res: http.IncomingMessage) => void): http.ClientRequest, (url: (string | URL), options: RequestOptions, callback?: (res: http.IncomingMessage) => void): http.ClientRequest}, Agent: Agent, Server: Server, createServer: {<Request=typeof http.IncomingMessage extends typeof http.IncomingMessage, Response=typeof http.ServerResponse extends typeof http.ServerResponse>(requestListener?: http.RequestListener<Request, Response>): Server<Request, Response>, <Request=typeof http.IncomingMessage extends typeof http.IncomingMessage, Response=typeof http.ServerResponse extends typeof http.ServerResponse>(options: ServerOptions<Request, Response>, requestListener?: http.RequestListener<Request, Response>): Server<Request, Response>}, RequestOptions: http.RequestOptions & tls.SecureContextOptions & {checkServerIdentity?: typeof tls.checkServerIdentity | undefined, rejectUnauthorized?: boolean | undefined, servername?: string | undefined}, globalAgent: Agent, AgentOptions: AgentOptions, ServerOptions: tls.SecureContextOptions & tls.TlsOptions & http.ServerOptions<Request, Response>}|undefined)}}
 */
export default {
    http: function (app) {
        const config = loadConfig();
        try {
	        http.createServer(app).listen(config.port);
            return http
        } catch (err) {

            //console.log(err);
            return err;

        }

    },
    "https" (app) {
        try {
            https.createServer(app).listen(config.https.port);
            return https
        } catch (err) {
            //console.log(err);
            return err;

        }
    }
};


